---
title: "Google Summer of Code Proposal: bayesplot"
execute:
  echo: false
  warning: false
format: 
  html:
    toc: false
    number-sections: true
    css: styles.css
    embed-resources: true
editor: visual
---

# About

In May, I'll finish a Master's in Applied Data Science at the University of Michigan; the curriculum has been Python-centric and essentially acted as a crash course in vanilla machine learning, but provided some foundations in causal inference, uncertainty, and math that have carried over to my personal study of Bayesian stats. I'm motivated by the prospect of making the Baysian workflow accessible to anyone who's interested in applying it, and think bayesplot is a really key component of both learning and maintaining a principled way of doing Bayesian inference in the real world.

In graduate school, I've geared all my project work toward Bayesian methods. I've completed two large projects using a Bayesian approach to modeling (resulting reports [here](https://github.com/MichaelPaulLight/milestone_2/blob/main/reporting/report.pdf) and [here](https://github.com/MichaelPaulLight/milestone_2/blob/main/reporting/report.pdf)), and am currently completing [a third](https://github.com/MichaelPaulLight/nba_l2m) as part of an independent study with [Kevyn Collins-Thompson](https://www.si.umich.edu/people/kevyn-collins-thompson), who directs the Applied Data Science program.

-   [Github](https://github.com/MichaelPaulLight)

-   [Linkedin](https://www.linkedin.com/in/michael-paul-light/)

-   [Email](michaelpaullight@gmail.com)

# Abstract

Bayesplot is an R package that provides an extensive library of plotting functions for use after fitting Bayesian models (typically with MCMC). The plots created by **bayesplot** are ggplot objects, which means that after a plot is created it can be further customized using various functions from the **ggplot2** package.

Currently **bayesplot** offers a variety of plots of posterior draws, visual MCMC diagnostics, graphical posterior (or prior) predictive checking, and general plots of posterior (or prior) predictive distributions.

The goal of this project will be to implement the ensemble of visual predictive checks proposed by [Säilynoja](https://teemusailynoja.github.io/visual-predictive-checks/) et al. in bayesplot, with a particular focus on adding visualizations for predictive checks of discrete and categorical outcomes.

## Visualizations to be added include:

### PIT-ECDF Diagnostics of Overlaid KDE Plots

This project will add functionality to bayesplot that helps users identify instances where the common approach of using overlaid KDE plots to assess models fit to count data by pairing overlaid KDE plots with visualizations of their PIT-ECDF values. Below, PIT-ECDF diagnostics are plotted for a better- and worse-fitting model. In addition to creating a function that can be added to an existing visualization using ggplot2 syntax, this project will augment bayesplots' existing overlaid kde functions such that users will be automatically warned if PIT-ECDF diagnostics indicate over-smoothing.

![PIT-ECDF plot shows a better fit to data.](figures/plot_pit-ecdf.png)![PIT-ECDF plot shows a worse fit to data.](figures/plot_pit-ecdf_2.png)

### Discrete Rootograms

Traditionally, in a rootogram the frequencies of the observed counts are visualized with a bar plot, and predictive expected frequencies as a connected line plot Figure 1 (a). This project will develop a bayesplot function to generate a modified, Discrete Rootogram shown in Figure 1 (b), which emphasizes the discreteness of the predictions by showing the predictive frequencies as points and point-wise credible intervals, instead of connecting these into lines and filled areas. For overlaying, we prefer to show the observations as points and use color to highlight the observations falling outside the credible intervals.

![](figures/plot_discrete-rootogram_4.png){fig-align="center"}

### PAV-Adjusted Calibration Plots

To address issues of users drawing erroneous conclusions from binned calibration plots, this project will develop functions to create PAV-adjusted calibration plots to visualize binary data. These plots combine conditional event probability visualizations with consistency bands corresponding to posterior predictive draws, which viewed together will help users distinguish well- from poor-fitting binary predictive models.

![Comparison of two models using PAV-adjusted calibration plots. In the PAV-adjusted calibration plot of the zero-inflated negative binomial model, we see the calibration curve staying within the consistency bands, and also observe a wider range of predicted event probabilities. Together these two qualities indicate the zero-inflated model to be better calibrated.](figures/plot_pav-calibration_2.png)

### PAV-Adjusted Residual Plots

While binned and PAV-adjusted calibration plots are useful for assessing the overall predictive calibration of a model, the behavior conditional on individual predictors is often of interest to practitioners. This project will create bayesplot functions that help users assess the deviations between observations and predictions of models by displaying their residuals as PAV-adjusted residual plots.

![The PAV-adjusted residual plot that corresponds to the negative binomial PAV-adjusted calibration plot in section 2.1.3.](figures/plot_pav-marginal_3.png)

### Other project outcomes

This project will develop documentation for each new new plot, helping users not only understand their functional behavior and use but also interpret their outputs. In addition, one case study will be created to demonstrate each plot's utility in a real world application of the Bayesian worklow.

# Previous Contributions to Stan

## Projpred

-   [PR #509](https://github.com/stan-dev/projpred/pull/509)

    -   Add contribution guidelines to README.Rmd

# List of Deliverables

Editable [here](https://docs.google.com/spreadsheets/d/1llapJAsr9QqkNebSWEMnm0b4QB_sRLwOjwWQdF92Kak/edit?gid=1289123949#gid=1289123949).

```{r}
library(googlesheets4)
library(gt)

deliverables <- read_sheet("https://docs.google.com/spreadsheets/d/1llapJAsr9QqkNebSWEMnm0b4QB_sRLwOjwWQdF92Kak/edit?gid=0#gid=0", sheet = 2)

deliverables |> gt() |> 
    fmt_date(columns = deadline, date_style = "wd_m_day_year")
```

# Timeline

Editable [here](https://docs.google.com/spreadsheets/d/1llapJAsr9QqkNebSWEMnm0b4QB_sRLwOjwWQdF92Kak/edit?gid=0#gid=0).

```{r}
#| output: true

timeline <- read_sheet("https://docs.google.com/spreadsheets/d/1llapJAsr9QqkNebSWEMnm0b4QB_sRLwOjwWQdF92Kak/edit?gid=0#gid=0", sheet = 1)

timeline |> gt() |> 
    fmt_date(columns = date, date_style = "wd_m_day_year")

```

# Contributor/Project Fit

## Motivation

The Stan team has made a huge imprint on my work and how I see the world, and I'd love to contribute to the project in any way that I can. I consider GSOC an opportunity to learn a ton and help get Stan to more people. I'm motivated by the prospect of making the Baysian workflow accessible to anyone who's interested in applying it, and think bayesplot is a really key component of both learning and maintaining a principled way of doing Bayesian inference in the real world.

I also think working on a GSOC project with the Stan team represents an invaluable educational experience. I'm excited to learn new ways to solve difficult problems and expand my capabilities as a data scientist and software engineer.

## General Competencies

### R

-   Used for personal and professional data projects since 2020. Lots of reps with packages in the tidyverse and tidymodels ecosystems, web scraping, and medium-big data processing tools like DuckDB/Arrow.

-   I write R code every day to do data science, but there's a lot of room for growth in my ability to produce code in production.

### Stan

-   I started learning Stan syntax within the past year. I read Stan models every day, and can write simple models. Most of my exposure to Stan is via brms; the more complex models I’ve built have been with brms.

-   I have a solid understanding of the theory behind prior, retrodictive, and predictive checks in the Bayesian workflow, and experience using bayesplot, tidybayes, ggdist, marginaleffects, and vmc to analyze/visualize models. I've taken multiple courses on uncertainty visualization and am able to create bespoke, domain-specific visualizations that help more- and less-technical audiences understand Bayesian models and their implications.

-   I’ve recently incorporated sbc into my workflow and have read the papers by Talts, Mondrak, and Bürkner. I get the theoretical need for sbc, can run sbc and begin to interpret its outputs, and am actively developing my understanding of the associated math.

### Bayes

-   I started learning probability theory and Bayesian inference about a year ago, primarily using Statistical Rethinking, BDA3, the Bayesian Workflow paper, and Michael Betancourt's writing as resources. I took a one-day course on hierarchical modeling from Betancourt earlier this year. I have a solid grasp of the steps in the Bayesian workflow and their justification. I understand and can implement a justifiable version of the workflow to solve problems using observational data.

### Git

-   I use git to organize all my personal and academic projects. I'm familiar with git best practices and can collaborate with others on a shared repository.

-   I have opened issues on open source projects, but these cases have been limited to fixing typos in documentation.

# Availability

I'm available through the entire GSOC period, and plan on working on this project at least 20 hours each week, with a maximum availability of 40 hours per week. I'll be happy to work with the Stan team to adjust the total working hours as needed.

# Other GSOC Applications

I'm not applying for any other GSOC projects.

# After GSOC

I hope to continue contributing to the broader Stan project as I figure out the next steps in my professional or academic life. I intend on continuing to use Stan in all my data science work going forward, and acting as a kind of Bayesian ambassador who helps folks in academia and industry understand the utility and broad applicability of the Bayesian workflow.

I'd also like to expand the existing suite of Bayesian tools to better incorporate causal modeling methods (e.g. directed acyclic graphs) and their outputs in such a way that improves the user experience of building downstream generative and probabilistic models. Creating tools in the spirit of the tidymodels framework (as one example) that more clearly connect causal, generative, statistical, and computational models (as well as their visual outputs) represents a major opportunity to expand the Stan community by lowering the Bayesian barrier to entry for subject-matter experts who lack more advanced formal training in statistics.
