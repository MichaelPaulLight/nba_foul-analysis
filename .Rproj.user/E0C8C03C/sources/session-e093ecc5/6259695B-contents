---
title: "template_bayesian workflow"
format: html
editor: visual
---

# Purpose of This Document

This template guides you through a Bayesian analysis following McElreath's workflow from Statistical Rethinking. Each section includes explanatory notes that you should replace with your own content.

# Simplest Negative Binomial Model of Foul Effects on Shot Attempts

## Load Packages

```{r}
#| label: setup
#| include: false

# Load required packages
library(tidyverse)
library(brms)
library(tidybayes)
library(bayesplot)
library(dagitty)
library(ggdag)
```

## Domain Knowledge

Previous Research Summarize key findings from previous research. What do we already know about this system?

Mechanisms Describe the potential mechanisms at work. How might your variables be causally related?

Expected Patterns Based on theory and previous research, what patterns do you expect to see in your data?

### Research Questions

State your research questions clearly and precisely. Good research questions should be:

1.  Specific and well-defined Answerable with your available data

2.  Connected to your theoretical framework.

## Causal Model

### Directed Acyclic Graph (DAG)

Determine which variables to include in your model with the following workflow:

1.  List all of the paths connecting X (the potential cause of interest) and Y (the out- come).

2.  Classify each path by whether it is open or closed. A path is open unless it contains a collider.

3.  Classify each path by whether it is a backdoor path. A backdoor path has an arrow entering X.

4.  If there are any open backdoor paths, decide which variable(s) to condition on to close it (if possible). \[dagitty::impliedConditionalIndependencies(), dagitty::adjustmentSets()\]

```{r}

#| label: dag
#| fig-cap: "Directed Acyclic Graph representing hypothesized causal relationships"
#| code-fold: show

# Create your DAG
# Example:

defender_dag <- dagitty('dag {
  Fouls -> ShotAttempts
  
  DefenderSkill -> Fouls
  DefenderSkill -> ShotAttempts
  
  Fouls -> DefenderProximity -> ShotAttempts
  
  DefenderSkill ->Position 
  Position -> ShotDistance
  ShotDistance -> ShotAttempts
  Team -> DefenderSkill
  OffensiveSkill -> ShotAttempts
  OffensiveSkill -> ShotDistance
  
  DefenderSkill -> DefenderProximity
  OffensiveSkill -> DefenderProximity
}')

# Plot the DAG
coords <- list(
  x = c(Fouls = 2, ShotAttempts = 4, 
        DefenderSkill = 1, DefenderProximity = 3,
        Position = 0, ShotDistance = 3, 
        Team = 0, OffensiveSkill = 2),
  y = c(Fouls = 2, ShotAttempts = 2, 
        DefenderSkill = 1, DefenderProximity = 1,
        Position = 0, ShotDistance = 0, 
        Team = 2, OffensiveSkill = 3)
)

ggdag_status(defender_dag, layout = coords) +
  theme_dag() +
  geom_dag_point(color = "lightblue", size = 20, alpha = 0.5) +
  geom_dag_text(color = "black", size = 4) +
  geom_dag_edges(edge_colour = "gray30", 
                 edge_width = 0.8) +
  theme_void() +
  theme(plot.background = element_rect(fill = "white", color = NA)) +
  scale_x_continuous(expand = expansion(mult = 0.2)) +
  scale_y_continuous(expand = expansion(mult = 0.2))  +
  ggtitle("Causal Model of Defensive Fouls and Shot Attempts")

ggdag_paths(defender_dag, 
           from = "Fouls", 
           to = "ShotAttempts",
           shadow = TRUE,
           layout = "nicely") +
  theme_dag() +
  geom_dag_point(color = "lightblue", size = 20, alpha = 0.5) +
  geom_dag_text(color = "black", size = 4) +
  geom_dag_edges(edge_colour = "gray30", 
                 edge_width = 0.8) +
  theme_void() +
  theme(plot.background = element_rect(fill = "white", color = NA)) +
  scale_x_continuous(expand = expansion(mult = 0.2)) +
  scale_y_continuous(expand = expansion(mult = 0.2)) +
  ggtitle("Causal Pathways from Fouls to Shot Attempts")

# Display Implied Conditional Independencies

implied <- impliedConditionalIndependencies(defender_dag)

implied

# Display Adjustment Sets

adjustment_sets <- adjustmentSets(defender_dag, exposure = "Fouls", outcome = "ShotAttempts")

adjustment_sets

```

### DAG Interpretation

Justify the inclusion and exclusion of variables in your model based on the DAG.

Define the relationships in your DAG in terms of:

1.  The Fork

2.  The Pipe

3.  The Collider

4.  The Descendant

## Data Simulation

### Simulate Data Implied by Causal Model

```{r}
set.seed(42)

# Sim parameters
n_observations <- 1000
n_defenders <- 50
n_positions <- 5
position_names <- c("PG", "SG", "SF", "PF", "C")
shot_distance_ranges <- c("0_through_9_ft", "10_through_23_ft", "24_plus")
defender_proximity_ranges <- c("0-2 Feet", "2-4 Feet", "4-6 Feet", "6+ Feet")
teams <- paste0("Team_", LETTERS[1:10])

# Creating a tibble of defenders
defenders <- tibble(
  defender_id = 1:n_defenders,
  defender_name = paste0("Player_", 1:n_defenders),
  position_id = sample(1:n_positions, n_defenders, replace = TRUE),
  position = position_names[position_id],
  team = sample(teams, n_defenders, replace = TRUE),
  defensive_skill = rnorm(n_defenders, 0, 1)
)

# Creating a tibble of simulated shots
simulated_shots <- tibble(
  shot_id = 1:n_observations,
  
  # Randomly assigning them to defenders
  defender_id = sample(defenders$defender_id, n_observations, replace = TRUE),
  
  # Simulate fouls (influenced by defender skill and position)
  # Centers and PFs tend to foul more
  defender_foul_count = NA_integer_,
  
  # Shot characteristics
  shot_distance_category = NA_character_,
  defender_proximity = NA_character_,
  
  # Outcome
  shot_made = NA_integer_
)

# Joining defender information
simulated_shots <- simulated_shots %>%
  left_join(defenders, by = "defender_id")

# Now fill in the simulated values based on defender characteristics
simulated_shots <- simulated_shots %>%
  mutate(
    # Simulate fouls based on position and skill
    position_foul_effect = case_when(
      position == "C" ~ 1.0,
      position == "PF" ~ 0.7,
      position == "SF" ~ 0.3,
      position == "SG" ~ 0.2,
      position == "PG" ~ 0.0
    ),
    
    # Defenders with lower skill tend to foul more
    defender_foul_count = pmin(5, pmax(0, round(rpois(n(), lambda = max(0, 2 - defensive_skill + position_foul_effect))))),
    
    # Shot distance influenced by defender position
    # Guards defend more perimeter shots
    shot_distance_category = case_when(
      position %in% c("PG", "SG") & runif(n()) < 0.6 ~ "24_plus",
      position %in% c("SF") & runif(n()) < 0.4 ~ "24_plus",
      position %in% c("PF", "C") & runif(n()) < 0.2 ~ "24_plus",
      position %in% c("PF", "C") & runif(n()) < 0.6 ~ "0_through_9_ft",
      TRUE ~ "10_through_23_ft"
    ),
    
    # Defender proximity affected by fouls and skill
    # More fouls -> more distance
    proximity_base = 2 + defender_foul_count * 0.5 - defensive_skill,
    proximity_category_id = pmin(4, pmax(1, round(proximity_base))),
    defender_proximity = defender_proximity_ranges[proximity_category_id],
    
    # Shot success probability
    base_prob = case_when(
      shot_distance_category == "0_through_9_ft" ~ 0.6,
      shot_distance_category == "10_through_23_ft" ~ 0.4,
      shot_distance_category == "24_plus" ~ 0.35
    ),
    
    proximity_effect = case_when(
      defender_proximity == "0-2 Feet" ~ -0.15,
      defender_proximity == "2-4 Feet" ~ -0.08,
      defender_proximity == "4-6 Feet" ~ -0.02,
      defender_proximity == "6+ Feet" ~ 0.05
    ),
    
    foul_effect = defender_foul_count * 0.02,
    
    shot_prob = plogis(qlogis(base_prob) + proximity_effect + foul_effect - defensive_skill * 0.3),
    
    shot_made = rbinom(n(), 1, shot_prob)
  )

# Clean up intermediate columns
simulated_shots <- simulated_shots %>%
  select(
    shot_id, 
    defender_id, defender_name, position, team,
    defender_foul_count, 
    shot_distance_category, defender_proximity,
    shot_made,
    defensive_skill  # Keep for validation
  ) %>%
  # Add a few more useful columns
  mutate(
    shots_attempted = 1,
    period = sample(1:4, n(), replace = TRUE),
    game_id = sample(1:20, n(), replace = TRUE)
  )

# Aggregate data for analysis
shots_by_defender_foul <- simulated_shots %>%
  group_by(
    defender_name, 
    position, 
    defender_foul_count,
    shot_distance_category
  ) %>%
  summarize(
    total_shots = sum(shots_attempted),
    shots_made = sum(shot_made),
    fg_pct = shots_made / total_shots,
    .groups = "drop"
  )

# Preview the data
head(simulated_shots)
head(shots_by_defender_foul)

period_agg_by_team <- simulated_shots %>%
  group_by(game_id, period, team, defender_name, position, defender_foul_count) %>%
  summarize(
    offender_fga = sum(shots_attempted),
    offender_fgm = sum(shot_made),
    offender_shot_dist_range = first(shot_distance_category),
    close_def_dist_range = first(defender_proximity),
    .groups = "drop"
  ) %>%
  # Scale fouls for modeling
  mutate(
    fouls_scaled = scale(defender_foul_count)[,1],
    slug_team_def = team
  )

# Preview the aggregated data
head(period_agg_by_team)

```

## Data Loading and Processing

Data Loading and Processing

```{r}

offense_data <- nanoparquet::read_parquet(here::here("data", "shots_offensive_perspective.parquet"))
```

## Model Building

### Statistical Model Specification

$$
x ~ N(mu,sigma)
mu = alpha + beta *x
alpha ~ N(0,10)
beta ~ N(0,2)
sigma ~ Exponential(1)
$$

### Computational Model Specification

Define BRMS, PyMC, etc. code.

#### No Interaction Model

```{r}
no_interaction_formula <- bf(
  offender_fga ~ fouls_scaled + 
    (1 | slug_team_def) + 
    (1 | position) + 
    (1 | offender_shot_dist_range) + 
    (1 | close_def_dist_range)
)

# Define priors
no_interaction_priors <- c(
  # Fixed effects
  prior(normal(2, 0.5), class = "Intercept"),
  prior(normal(0, 0.25), class = "b", coef = "fouls_scaled"),
  
  # Random effects standard deviations
  prior(exponential(1), class = "sd", group = "slug_team_def"),
  prior(exponential(1), class = "sd", group = "position"),
  prior(exponential(1), class = "sd", group = "offender_shot_dist_range"),
  prior(exponential(1), class = "sd", group = "close_def_dist_range"),
  
  # Negative binomial dispersion parameter
  prior(exponential(1), class = "shape")
)

constrained_no_interaction_priors <- c(
  # Fixed effects - tighter
  prior(normal(1.6, 0.5), class = "Intercept"),
  prior(normal(0, 0.2), class = "b", coef = "fouls_scaled"),
  
  # Random effects standard deviations - tighter
  prior(exponential(4), class = "sd", group = "slug_team_def"),
  prior(exponential(4), class = "sd", group = "position"),
  prior(exponential(4), class = "sd", group = "offender_shot_dist_range"),
  prior(exponential(4), class = "sd", group = "close_def_dist_range"),
  
  # Negative binomial dispersion parameter - more informative
  prior(gamma(3, 0.5), class = "shape")
)
```

### Prior Predictive Checks

```{r}
#| label: prior-checks
#| fig-cap: "Prior predictive simulations"

# Prior predictive check
no_interaction_model_prior <- brm(
  formula = no_interaction_formula,
  data = period_agg_by_team,
  family = negbinomial(),
  prior = no_interaction_priors,
  sample_prior = "only",
  chains = 2,
  cores = 2,
  iter = 1000,
  seed = 42
)

# Plot simulations

pred_data <- data.frame(
  fouls_scaled = seq(-2, 2, by = 0.1),
  slug_team_def = "Team_A",
  position = "C",
  offender_shot_dist_range = "10_through_23_ft",
  close_def_dist_range = "2-4 Feet"
)

prior_preds <- posterior_predict(
  no_interaction_model_prior, 
  newdata = pred_data,
  nsamples = 100
)

# Plot a subset of prior predictions
plot_data <- data.frame(
  fouls_scaled = pred_data$fouls_scaled,
  y_min = apply(prior_preds, 2, quantile, probs = 0.1),
  y_max = apply(prior_preds, 2, quantile, probs = 0.9),
  y_median = apply(prior_preds, 2, median)
)

ggplot(plot_data, aes(x = fouls_scaled)) +
  geom_ribbon(aes(ymin = y_min, ymax = y_max), alpha = 0.3, fill = "skyblue") +
  geom_line(aes(y = y_median), color = "blue") +
  labs(
    title = "Prior Predictive Check",
    subtitle = "80% interval of predicted shot attempts (blue ribbon) and median (blue line)",
    x = "Standardized Fouls",
    y = "Predicted Shot Attempts"
  ) +
  theme_minimal() +
  coord_cartesian(ylim = c(0, 20))

```

### Model Fitting

#### No interaction model

```{r}

#| label: model-fit
#| cache: true

# Fit the full model
no_interaction_model <- brm(
  formula = no_interaction_formula,
  data = period_agg_by_team,
  family = negbinomial(),
  prior = no_interaction_priors,
  chains = 4,
  cores = 4,
  iter = 2000,
  warmup = 1000,
  control = list(adapt_delta = 0.95),
  seed = 42,
  file = "models/no-interaction-model_negbinom_sim_1.rds"
)


```

## Model Checking

### Computational Diagnostics

```{r}

summary(no_interaction_model)
mcmc_trace(no_interaction_model)
pp_check(no_interaction_model, ndraws = 50)

# Extract and plot posterior distributions
posterior_samples <- as_draws_df(no_interaction_model)

# Plot the effect of fouls
ggplot(posterior_samples, aes(x = b_fouls_scaled)) +
  geom_density(fill = "skyblue", alpha = 0.5) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(
    title = "Posterior Distribution of Foul Effect",
    x = "Effect of Fouls on Shot Attempts (log scale)",
    y = "Density"
  ) +
  theme_minimal()

```

### Posterior Predictive Checks

```{r}
prob_positive <- mean(posterior_samples$b_fouls_scaled > 0)
cat("Probability that fouls increase shot attempts:", prob_positive, "\n")

# Calculate expected change in shot attempts for +1 SD increase in fouls
median_effect <- median(posterior_samples$b_fouls_scaled)
mean_shots <- exp(median(posterior_samples$b_Intercept))
expected_increase <- mean_shots * (exp(median_effect) - 1)
cat("Expected increase in shot attempts for +1 SD increase in fouls:", round(expected_increase, 2), "\n")

```

## Model Interpretation

### Parameter Estimates

```{r}
ranef_summary <- ranef(no_interaction_model, summary = TRUE)

# Plot team random effects
ranef_team <- ranef_summary$slug_team_def[, , "Intercept"] %>%
  as.data.frame() %>%
  rownames_to_column("team") %>%
  arrange(Estimate)

ggplot(ranef_team, aes(x = reorder(team, Estimate), y = Estimate)) +
  geom_point() +
  geom_errorbar(aes(ymin = Q2.5, ymax = Q97.5), width = 0.2) +
  coord_flip() +
  labs(
    title = "Team-Specific Effects on Shot Attempts",
    x = "Team",
    y = "Effect on log(Shot Attempts)"
  ) +
  theme_minimal()

```

### Posterior Predictions

```{r}
new_data <- expand_grid(
  fouls_scaled = seq(-2, 2, by = 0.5),
  position = unique(period_agg_by_team$position),
  slug_team_def = "Team_A",  # Fix at one team
  offender_shot_dist_range = "10_through_23_ft",  # Fix at mid-range
  close_def_dist_range = "2-4 Feet"  # Fix at moderate proximity
)

# Add predictions
predictions <- new_data |> add_epred_draws(
  object = no_interaction_model,
  re_formula = NULL,  # Include random effects
  ndraws = 100
)

# Summarize and plot predictions
pred_summary <- predictions %>%
  group_by(fouls_scaled, position) %>%
  summarize(
    mean = mean(.epred),
    lower = quantile(.epred, 0.025),
    upper = quantile(.epred, 0.975),
    .groups = "drop"
  )

# Plot predictions by position
ggplot(pred_summary, aes(x = fouls_scaled, y = mean, color = position, fill = position)) +
  geom_line() +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, color = NA) +
  labs(
    title = "Predicted Shot Attempts by Fouls and Position",
    subtitle = "Shaded regions represent 95% credible intervals",
    x = "Standardized Fouls",
    y = "Predicted Shot Attempts"
  ) +
  theme_minimal() +
  scale_color_brewer(palette = "Set1") +
  scale_fill_brewer(palette = "Set1")

```

### Predictor Residual Analysis

```{r}

```

### Sensitivity Analysis

```{r}

```

### Counterfactual Analysis

```{r}
counterfactual_data <- tibble(
  scenario = c("Low Fouls", "Average Fouls", "High Fouls"),
  fouls_scaled = c(-1, 0, 1),
  position = "C",  # Fix at center position
  offender_shot_dist_range = "0_through_9_ft",  # Fix at close range
  close_def_dist_range = "0-2 Feet",  # Fix at tight defense
  slug_team_def = "Team_A"  # Fix at one team
)

# Generate predictions for counterfactuals
cf_predictions <- fitted(
  no_interaction_model, 
  newdata = counterfactual_data,
  re_formula = NULL,  # Include random effects
  summary = FALSE  # Return all posterior samples
)

# The dimensions of cf_predictions are [posterior_samples, scenarios]
# Let's extract the scenarios correctly
n_samples <- dim(cf_predictions)[1]

# Calculate differences between scenarios
diff_high_low <- cf_predictions[, 3] - cf_predictions[, 1]
diff_high_avg <- cf_predictions[, 3] - cf_predictions[, 2]
diff_avg_low <- cf_predictions[, 2] - cf_predictions[, 1]

# Summarize differences
diff_summary <- tibble(
  comparison = c("High vs. Low Fouls", "High vs. Avg Fouls", "Avg vs. Low Fouls"),
  mean_diff = c(mean(diff_high_low), mean(diff_high_avg), mean(diff_avg_low)),
  lower = c(quantile(diff_high_low, 0.025), quantile(diff_high_avg, 0.025), quantile(diff_avg_low, 0.025)),
  upper = c(quantile(diff_high_low, 0.975), quantile(diff_high_avg, 0.975), quantile(diff_avg_low, 0.975)),
  prob_positive = c(mean(diff_high_low > 0), mean(diff_high_avg > 0), mean(diff_avg_low > 0))
)

# Plot differences
ggplot(diff_summary, aes(x = reorder(comparison, mean_diff), y = mean_diff)) +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  coord_flip() +
  labs(
    title = "Causal Effect of Fouls on Shot Attempts",
    subtitle = "Differences in predicted shot attempts between foul scenarios",
    x = "Comparison",
    y = "Difference in Shot Attempts"
  ) +
  theme_minimal() +
  # Add text annotations
  geom_text(aes(label = sprintf("P(Δ > 0) = %.2f", prob_positive)), 
            hjust = -0.1, vjust = -0.5)
```

## Conclusion

### Summary of Findings

### Key Results

Summarize your main findings here, connecting them back to your research questions.

### Limitations and Next Steps

Important Considerations Discuss key limitations and potential future directions.

# References
