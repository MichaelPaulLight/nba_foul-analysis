```{r}
library(nanoparquet)
library(tidyverse)
library(hoopR)
library(zoo)
```


```{r}
data_dir <- here::here("02_data", "02-1_data_raw")
file_pattern <- "\\d+_pbp_gt\\.parquet$"

files <- list.files(data_dir, pattern = file_pattern, full.names = TRUE)
latest_file <- files[order(file.mtime(files), decreasing = TRUE)][1]

pbp_df <- read_parquet(latest_file)

pbp_df <- pbp_df |> 
  mutate(fouling_player = case_when(
    str_detect(description, regex("foul:", ignore_case = T)) ~ player1, 
    .default = NA
  )) |> 
  mutate(fouled_player = case_when(
    str_detect(description, regex("foul:", ignore_case = T)) ~ player3, 
    .default = NA
  )) |> 
  mutate(personal_fouls_after_event = case_when(
    !is.na(fouling_player) ~ str_extract(description, regex("\\([^()]*\\)(?![^()]*\\))"))
  )) |> 
  mutate(personal_fouls_after_event = str_extract(personal_fouls_after_event, regex("\\d+")))
```

```{r}
pbp_df_by_defender <- pbp_df %>%
  group_by(game_id, slug_team) %>%
  mutate(
    stint_home = ifelse(slug_team == team_home, cumsum(msg_type == 8) + 1, NA),
    stint_away = ifelse(slug_team == team_away, cumsum(msg_type == 8) + 1, NA)
  ) %>%
  group_by(game_id) %>%
  mutate(
    across(starts_with("stint"), ~ na.locf0(., fromLast = TRUE)),
    across(starts_with("stint"), ~ na.locf(.))
  ) %>%
  ungroup() %>%
  pivot_longer(
    cols = starts_with("lineup"),
    names_to = "lineup_location",
    values_to = "lineup",
    names_prefix = "lineup_"
  ) %>%
  mutate(
    pts_team = ifelse(lineup_location == "home", shot_pts_home, shot_pts_away),
    pts_opp = ifelse(lineup_location == "away", shot_pts_home, shot_pts_away),
    poss_team = ifelse(lineup_location == "home", poss_home, poss_away),
    poss_opp = ifelse(lineup_location == "away", poss_home, poss_away),
    slug_team = ifelse(lineup_location == "home", team_home, team_away),
    slug_opp = ifelse(lineup_location == "away", team_home, team_away),
    stint = ifelse(lineup_location == "home", stint_home, stint_away)
  ) %>%
  filter(off_slug_team != slug_team) %>%
  separate_longer_delim(cols = lineup, delim = ", ") %>%
  rename(player_name = lineup) %>%
  mutate(
    personal_fouls_after_event = case_when(
      fouling_player == player_name ~ personal_fouls_after_event, 
      .default = NA
    )
  ) %>%
  mutate(personal_fouls_after_event = as.numeric(personal_fouls_after_event)) %>%
  group_by(game_id, slug_team, player_name) %>%
  fill(personal_fouls_after_event) %>%
  ungroup() %>%
  mutate(personal_fouls_after_event = ifelse(is.na(personal_fouls_after_event), 0, personal_fouls_after_event)) %>%
  group_by(game_id, slug_team, player_name) %>%
  mutate(
    personal_fouls_during_event = case_when(
      fouling_player == player_name ~ personal_fouls_after_event - 1,
      TRUE ~ personal_fouls_after_event
    )
  ) %>%
  ungroup()
```

```{r}
# Create shot-only dataframe
shot_pbp_by_defense <- pbp_df_by_defender %>%
  filter(str_detect(description, regex("shot", ignore_case = T)) & 
         !str_detect(description, regex("clock", ignore_case = T))) %>%
  mutate(shot_type = case_when(
    str_detect(description, "3pt") ~ "3pt",
    TRUE ~ "2pt"
  )) %>%
  rename(known_defender = player3)
```

```{r}
shot_level_df <- read_parquet(here::here("02_data", "02-2_data_clean", "shot_level_defender_matchup_data.parquet"))
```


